logging {
  level = "debug"
}

// linux scrape
//local.file "hostname" {
//  filename = "/etc/hostname"
//}

//local.file_match "local_files" {
//  path_targets = [{"__path__" = "/var/log/**/*.log"}, {"__path__" = "/var/log/syslog"}]
//  sync_period = "5s"
//}

//loki.source.file "log_scrape" {
//  targets    = local.file_match.local_files.targets
//  forward_to = [loki.process.log_normalize.receiver]
//  tail_from_end = true
//}

// win event log scrape
loki.source.windowsevent "application"  {
    eventlog_name = "Application"
    exclude_event_data = false
    exclude_user_data = false
    exclude_event_message = true
    use_incoming_timestamp = true
    labels     = {"host" = to_lower(constants.hostname),"service_name" = "alloy:winevent:application"}
    forward_to = [loki.process.log_normalize.receiver]
}

loki.source.windowsevent "security"  {
    eventlog_name = "Security"
    exclude_event_data = false
    exclude_user_data = false
    exclude_event_message = true
    use_incoming_timestamp = true
    labels     = {"host" = to_lower(constants.hostname),"service_name" = "alloy:winevent:security"}
    forward_to = [loki.process.log_normalize.receiver]
}

loki.source.windowsevent "system"  {
    eventlog_name = "System"
    exclude_event_data = false
    exclude_user_data = false
    exclude_event_message = true
    use_incoming_timestamp = true
    labels     = {"host" = to_lower(constants.hostname),"service_name" = "alloy:winevent:system"}
    forward_to = [loki.process.log_normalize.receiver]
}

loki.source.windowsevent "powershell"  {
    eventlog_name = "Windows PowerShell"
    exclude_event_data = false
    exclude_user_data = false
    exclude_event_message = true
    use_incoming_timestamp = true
    labels     = {"host" = to_lower(constants.hostname),"service_name" = "alloy:winevent:powershell"}
    forward_to = [loki.process.log_normalize.receiver]
}

//loki.relabel "add_static_label" {
//    forward_to = [loki.write.grafana_loki.receiver]

//    rule {
//        target_label = "host"
//        replacement  = constants.hostname
//    }

loki.process "log_normalize" {
//stage.drop {
//    source = ""
//    expression  = ".*Connection closed by authenticating user root"
//    drop_counter_reason = "noisy"
//  }

  stage.regex {
    expression = `(?P<level>(?i)\b(info|debug|error|warn|trace|fatal|emergency|alert|panic)\b)`
  }

  stage.template {
    source   = "level_cleansed"
    template = `{{ default "unknown" .level | ToLower }}`
  }

  stage.labels {
    values = { "level" = "level_cleansed" }
  }

  stage.label_keep {
    values = [ "host", "service_name", "level" ]
  }

//  stage.static_labels {
//    values = {
//      test = "test",
//    }
//  }

//  stage.timestamp {
//    source = "time"
//    format = "2006-01-02T15:04:05.000000000Z"
//    //format = "2006-01-02T15:04:05,000-07:00"
//  }

  forward_to = [loki.write.grafana_loki.receiver]
}

loki.write "grafana_loki" {
  endpoint {
    url = "http://loki-grafana.domain.tld:port/loki/api/v1/push"

    // basic_auth {
    //  username = "admin"
    //  password = "admin"
    // }
  }
}
